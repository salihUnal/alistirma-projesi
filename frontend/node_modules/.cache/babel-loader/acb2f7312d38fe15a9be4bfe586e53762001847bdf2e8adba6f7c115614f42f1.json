{"ast":null,"code":"const mockMovies = [{\n  id: 1,\n  title: \"Amerikan Sapigi\",\n  description: \"Psikolojik Film\",\n  image: \"/images/American_Psyho.jpg\",\n  IMDB_Point: \"9.8\",\n  types: [\"Suç\", \"Korku\", \"Gerilim\", \"Drama\"],\n  releaseYear: 2000,\n  director: \"Mary Harron\",\n  duration: \"102 dk\"\n}, {\n  id: 2,\n  title: \"Harry Potter Felsefe Taşı\",\n  description: \"Fantastik-Bilim Kurgu Film\",\n  image: \"/images/Harry_Potter_Felsefe_Tasi.jpg\",\n  IMDB_Point: \"9.0\",\n  types: [\"Bilim Kurgu\", \"Gençlik\", \"Fantastik\"],\n  releaseYear: 2001,\n  director: \"Chris Columbus\",\n  duration: \"152 dk\"\n}, {\n  id: 3,\n  title: \"Hulk\",\n  description: \"Fantastik-Süperkahraman Film\",\n  image: \"/images/Hulk.jpg\",\n  IMDB_Point: \"8.9\",\n  types: [\"Bilim Kurgu\", \"Fantastik\", \"Çizgi Roman\"],\n  releaseYear: 2003,\n  director: \"Ang Lee\",\n  duration: \"138 dk\"\n}, {\n  id: 4,\n  title: \"Makinist\",\n  description: \"Psikolojik Gerilim Film\",\n  image: \"/images/Makinist.jpg\",\n  IMDB_Point: \"9.7\",\n  types: [\"Suç\", \"Korku\", \"Gerilim\", \"Drama\"],\n  releaseYear: 2004,\n  director: \"Brad Anderson\",\n  duration: \"101 dk\"\n}, {\n  id: 5,\n  title: \"Amerikan Sapigi\",\n  description: \"Psikolojik Film\",\n  image: \"/images/American_Psyho.jpg\",\n  IMDB_Point: \"9.8\",\n  types: [\"Suç\", \"Korku\", \"Gerilim\", \"Drama\"],\n  releaseYear: 2000,\n  director: \"Mary Harron\",\n  duration: \"102 dk\"\n}, {\n  id: 6,\n  title: \"Harry Potter Felsefe Taşı\",\n  description: \"Fantastik-Bilim Kurgu Film\",\n  image: \"/images/Harry_Potter_Felsefe_Tasi.jpg\",\n  IMDB_Point: \"9.0\",\n  types: [\"Bilim Kurgu\", \"Gençlik\", \"Fantastik\"],\n  releaseYear: 2001,\n  director: \"Chris Columbus\",\n  duration: \"152 dk\"\n}, {\n  id: 7,\n  title: \"Hulk\",\n  description: \"Fantastik-Süperkahraman Film\",\n  image: \"/images/Hulk.jpg\",\n  IMDB_Point: \"8.9\",\n  types: [\"Bilim Kurgu\", \"Fantastik\", \"Çizgi Roman\"],\n  releaseYear: 2003,\n  director: \"Ang Lee\",\n  duration: \"138 dk\"\n}, {\n  id: 8,\n  title: \"Makinist\",\n  description: \"Psikolojik Gerilim Film\",\n  image: \"/images/Makinist.jpg\",\n  IMDB_Point: \"9.7\",\n  types: [\"Suç\", \"Korku\", \"Gerilim\", \"Drama\"],\n  releaseYear: 2004,\n  director: \"Brad Anderson\",\n  duration: \"101 dk\"\n}];\nexport const movieApi = {\n  search: async q => {\n    await new Promise(r => setTimeout(r, 500));\n    const term = q.trim().toLowerCase();\n    if (!term) return mockMovies;\n    return mockMovies.filter(m => m.title.toLowerCase().includes(term) || m.description.toLowerCase().includes(term) || m.types.some(t => t.toLowerCase().includes(term)) || String(m.releaseYear).includes(term) || m.director.toLowerCase().includes(term));\n  },\n  // Tüm filmleri getir\n  getAllMovies: async () => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return mockMovies;\n  },\n  // Popüler filmler\n  getPopular: async () => {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return mockMovies.filter(movie => movie.types.includes(\"Drama\") || movie.types.includes(\"Fantastik\"));\n  },\n  // En iyi filmler\n  getTopRated: async () => {\n    await new Promise(resolve => setTimeout(resolve, 1200));\n    return mockMovies.filter(movie => parseFloat(movie.IMDB_Point) >= 9.0);\n  },\n  // Şu anda oynayan filmler\n  getNowPlaying: async () => {\n    await new Promise(resolve => setTimeout(resolve, 900));\n    return mockMovies.filter(movie => movie.types.includes(\"Suç\") || movie.types.includes(\"Korku\"));\n  },\n  // Yakında gelecek filmler\n  getUpcoming: async () => {\n    await new Promise(resolve => setTimeout(resolve, 1100));\n    return mockMovies.filter(movie => movie.types.includes(\"Fantastik\") || movie.types.includes(\"Bilim Kurgu\"));\n  },\n  // Tür bazlı filmler\n  getMoviesByType: async type => {\n    await new Promise(resolve => setTimeout(resolve, 700));\n    return mockMovies.filter(movie => movie.types.includes(type));\n  },\n  // Tek film detayı\n  getMovieById: async id => {\n    await new Promise(resolve => setTimeout(resolve, 600));\n    return mockMovies.find(movie => movie.id === id) || null;\n  },\n  // Error test için\n  getMoviesWithError: async () => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    throw new Error(\"API bağlantı hatası\");\n  }\n};","map":{"version":3,"names":["mockMovies","id","title","description","image","IMDB_Point","types","releaseYear","director","duration","movieApi","search","q","Promise","r","setTimeout","term","trim","toLowerCase","filter","m","includes","some","t","String","getAllMovies","resolve","getPopular","movie","getTopRated","parseFloat","getNowPlaying","getUpcoming","getMoviesByType","type","getMovieById","find","getMoviesWithError","Error"],"sources":["D:/My React Project/alistirma-projesi/frontend/src/services/movieApi.ts"],"sourcesContent":["type ApiMovie = {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  image: string;\r\n  IMDB_Point: string;\r\n  types: string[];\r\n  releaseYear: number;\r\n  director: string;\r\n  duration: string;\r\n};\r\n\r\nconst mockMovies: ApiMovie[] = [\r\n  {\r\n    id: 1,\r\n    title: \"Amerikan Sapigi\",\r\n    description: \"Psikolojik Film\",\r\n    image: \"/images/American_Psyho.jpg\",\r\n    IMDB_Point: \"9.8\",\r\n    types: [\"Suç\", \"Korku\", \"Gerilim\", \"Drama\"],\r\n    releaseYear: 2000,\r\n    director: \"Mary Harron\",\r\n    duration: \"102 dk\",\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Harry Potter Felsefe Taşı\",\r\n    description: \"Fantastik-Bilim Kurgu Film\",\r\n    image: \"/images/Harry_Potter_Felsefe_Tasi.jpg\",\r\n    IMDB_Point: \"9.0\",\r\n    types: [\"Bilim Kurgu\", \"Gençlik\", \"Fantastik\"],\r\n    releaseYear: 2001,\r\n    director: \"Chris Columbus\",\r\n    duration: \"152 dk\",\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Hulk\",\r\n    description: \"Fantastik-Süperkahraman Film\",\r\n    image: \"/images/Hulk.jpg\",\r\n    IMDB_Point: \"8.9\",\r\n    types: [\"Bilim Kurgu\", \"Fantastik\", \"Çizgi Roman\"],\r\n    releaseYear: 2003,\r\n    director: \"Ang Lee\",\r\n    duration: \"138 dk\",\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"Makinist\",\r\n    description: \"Psikolojik Gerilim Film\",\r\n    image: \"/images/Makinist.jpg\",\r\n    IMDB_Point: \"9.7\",\r\n    types: [\"Suç\", \"Korku\", \"Gerilim\", \"Drama\"],\r\n    releaseYear: 2004,\r\n    director: \"Brad Anderson\",\r\n    duration: \"101 dk\",\r\n  },\r\n  {\r\n    id: 5,\r\n    title: \"Amerikan Sapigi\",\r\n    description: \"Psikolojik Film\",\r\n    image: \"/images/American_Psyho.jpg\",\r\n    IMDB_Point: \"9.8\",\r\n    types: [\"Suç\", \"Korku\", \"Gerilim\", \"Drama\"],\r\n    releaseYear: 2000,\r\n    director: \"Mary Harron\",\r\n    duration: \"102 dk\",\r\n  },\r\n  {\r\n    id: 6,\r\n    title: \"Harry Potter Felsefe Taşı\",\r\n    description: \"Fantastik-Bilim Kurgu Film\",\r\n    image: \"/images/Harry_Potter_Felsefe_Tasi.jpg\",\r\n    IMDB_Point: \"9.0\",\r\n    types: [\"Bilim Kurgu\", \"Gençlik\", \"Fantastik\"],\r\n    releaseYear: 2001,\r\n    director: \"Chris Columbus\",\r\n    duration: \"152 dk\",\r\n  },\r\n  {\r\n    id: 7,\r\n    title: \"Hulk\",\r\n    description: \"Fantastik-Süperkahraman Film\",\r\n    image: \"/images/Hulk.jpg\",\r\n    IMDB_Point: \"8.9\",\r\n    types: [\"Bilim Kurgu\", \"Fantastik\", \"Çizgi Roman\"],\r\n    releaseYear: 2003,\r\n    director: \"Ang Lee\",\r\n    duration: \"138 dk\",\r\n  },\r\n  {\r\n    id: 8,\r\n    title: \"Makinist\",\r\n    description: \"Psikolojik Gerilim Film\",\r\n    image: \"/images/Makinist.jpg\",\r\n    IMDB_Point: \"9.7\",\r\n    types: [\"Suç\", \"Korku\", \"Gerilim\", \"Drama\"],\r\n    releaseYear: 2004,\r\n    director: \"Brad Anderson\",\r\n    duration: \"101 dk\",\r\n  },\r\n];\r\n\r\nexport const movieApi = {\r\n  search: async (q: string) => {\r\n    await new Promise((r) => setTimeout(r, 500));\r\n    const term = q.trim().toLowerCase();\r\n    if (!term) return mockMovies;\r\n    return mockMovies.filter(\r\n      (m) =>\r\n        m.title.toLowerCase().includes(term) ||\r\n        m.description.toLowerCase().includes(term) ||\r\n        m.types.some((t) => t.toLowerCase().includes(term)) ||\r\n        String(m.releaseYear).includes(term) ||\r\n        m.director.toLowerCase().includes(term)\r\n    );\r\n  },\r\n  // Tüm filmleri getir\r\n  getAllMovies: async (): Promise<ApiMovie[]> => {\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    return mockMovies;\r\n  },\r\n\r\n  // Popüler filmler\r\n  getPopular: async (): Promise<ApiMovie[]> => {\r\n    await new Promise((resolve) => setTimeout(resolve, 800));\r\n    return mockMovies.filter(\r\n      (movie) =>\r\n        movie.types.includes(\"Drama\") || movie.types.includes(\"Fantastik\")\r\n    );\r\n  },\r\n\r\n  // En iyi filmler\r\n  getTopRated: async (): Promise<ApiMovie[]> => {\r\n    await new Promise((resolve) => setTimeout(resolve, 1200));\r\n    return mockMovies.filter((movie) => parseFloat(movie.IMDB_Point) >= 9.0);\r\n  },\r\n\r\n  // Şu anda oynayan filmler\r\n  getNowPlaying: async (): Promise<ApiMovie[]> => {\r\n    await new Promise((resolve) => setTimeout(resolve, 900));\r\n    return mockMovies.filter(\r\n      (movie) => movie.types.includes(\"Suç\") || movie.types.includes(\"Korku\")\r\n    );\r\n  },\r\n\r\n  // Yakında gelecek filmler\r\n  getUpcoming: async (): Promise<ApiMovie[]> => {\r\n    await new Promise((resolve) => setTimeout(resolve, 1100));\r\n    return mockMovies.filter(\r\n      (movie) =>\r\n        movie.types.includes(\"Fantastik\") || movie.types.includes(\"Bilim Kurgu\")\r\n    );\r\n  },\r\n\r\n  // Tür bazlı filmler\r\n  getMoviesByType: async (type: string): Promise<ApiMovie[]> => {\r\n    await new Promise((resolve) => setTimeout(resolve, 700));\r\n    return mockMovies.filter((movie) => movie.types.includes(type));\r\n  },\r\n\r\n  // Tek film detayı\r\n  getMovieById: async (id: number): Promise<ApiMovie | null> => {\r\n    await new Promise((resolve) => setTimeout(resolve, 600));\r\n    return mockMovies.find((movie) => movie.id === id) || null;\r\n  },\r\n\r\n  // Error test için\r\n  getMoviesWithError: async (): Promise<ApiMovie[]> => {\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    throw new Error(\"API bağlantı hatası\");\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}